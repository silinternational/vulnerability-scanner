const semverSatisfies = require('semver/functions/satisfies')
const { convertToCsvString } = require('./src/csv')
const github = require('./src/github')

const getSecurityVulnerabilitiesForPhpDependency = async (token, dependency) => {
  const vulnerabilities = await github.getSecurityVulnerabilitiesForPackageUsingCache(
    token,
    dependency.name
  )
  return vulnerabilities.filter(vulnerability => versionSatisfiesRange(
    dependency.version,
    vulnerability.vulnerableVersionRange
  ))
}

const versionSatisfiesRange = (version, gitHubVulnerableVersionRange) => {
  /*
   * NOTE: GitHub's `vulnerableVersionRange` uses a comma to separate the two
   * version constraints of a range:
   * https://docs.github.com/en/free-pro-team@latest/graphql/reference/objects#securityvulnerability
   * 
   * However, npm's semver doesn't know what to do with that comma. Removing it
   * seems to result in a version range that npm's semver can understand.
   */
  const npmSemverRange = gitHubVulnerableVersionRange.replace(',', '')
  return semverSatisfies(version, npmSemverRange)
}

/**
 * Get the list of security vulnerabilities affecting a given GitHub organization's
 * repositories.
 *
 * @param {string} token - A GitHub personal access token
 * @param {string} org - A GitHub organization's name
 * @returns {Promise<{identifiers, inspectedOn, packageName, repo, severity, vulnerableVersionRange}[]>}
 */
const getSecurityVulnerabilitiesForGitHubOrg = async (token, org) => {
  console.log(`Scanning for vulnerabilities in GitHub org. ${org}`)
  const repos = await github.listRepos(token, org)
  return getSecurityVulnerabilitiesForGitHubRepos(token, repos)
}

/**
 * Get a list of security vulnerabilities affecting the specified GitHub repos.
 *
 * Only repos whose dependencies could be determined will be included.
 *
 * @param {string} token - A GitHub personal access token
 * @param {string[]} repos - A list of repo names
 * @returns {Promise<{identifiers, inspectedOn, packageName, repo, severity, vulnerableVersionRange}[]>}
 */
const getSecurityVulnerabilitiesForGitHubRepos = async (token, repos) => {
  const results = []
  for (let i = 0; i < repos.length; i++) {
    const repo = repos[i]
    const vulnerabilities = await getSecurityVulnerabilitiesForGitHubRepo(token, repo)
    if (Array.isArray(vulnerabilities)) {
      results.push(...vulnerabilities)
    }
  }
  return results
}

/**
 * Get the security vulnerabilities for the specified GitHub repo. It will
 * return an array of vulnerabilities, or `undefined` if the GitHub repo's
 * dependencies could not be determined.
 *
 * NOTE: The data returned about each vulnerability will include a `repo` field
 * with given repo name.
 *
 * @param {string} token - A GitHub personal access token
 * @param {string} repo - A GitHub repo (formatted as "owner/library")
 * @returns {Promise<undefined | {identifiers, inspectedOn, packageName, repo, severity, vulnerableVersionRange}[]>}
 */
const getSecurityVulnerabilitiesForGitHubRepo = async (token, repo) => {
  console.log(`Looking for vulnerabilities in GitHub ${repo}`)
  const dependencies = await github.getDependenciesOfRepo(token, repo)
  if (dependencies === undefined) {
    console.log('(unable to determine dependencies)')
    return undefined
  }
  const vulnerabilities = await getSecurityVulnerabilitiesForPhpDependencies(
    token,
    dependencies
  )
  return vulnerabilities.map(vulnerability => addRepoName(repo, vulnerability))
}

const addRepoName = (repo, vulnerability) => {
  // Return a new object instead of modifying the given object (which caused problems).
  return Object.assign({repo}, vulnerability)
}

/**
 *
 * @param {string} token - A GitHub personal access token
 * @param {{name: string, version: string}[]} dependencies
 * @returns {Promise<Object[]>}
 */
const getSecurityVulnerabilitiesForPhpDependencies = async (token, dependencies) => {
  const results = []
  for (let i = 0; i < dependencies.length; i++) {
    const dependency = dependencies[i]
    console.log(`Checking ${dependency.name} [${dependency.version}]`)
    
    const vulnerabilities = await getSecurityVulnerabilitiesForPhpDependency(
      token,
      dependency
    )
    
    for (let j = 0; j < vulnerabilities.length; j++) {
      const vulnerability = vulnerabilities[j]
      console.log(
        `! Found vulnerability: ${vulnerability.packageName} ${vulnerability.vulnerableVersionRange}`
      )
      results.push(vulnerability)
    }
  }
  
  return results
}

module.exports = {
  convertToCsvString,
  getSecurityVulnerabilitiesForGitHubOrg
}
