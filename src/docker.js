
const { request } = require('@octokit/request')
const { readCsvString } = require('./csv')

/**
 * Get the base image specified in the FROM line of the provided Dockerfile
 * contents.
 *
 * @param {string} dockerfileContents
 * @returns {undefined | string}
 */
const getBaseImageFrom = dockerfileContents => {
  if (!dockerfileContents) {
    return undefined
  }
  
  const fromLine = getFromLine(dockerfileContents)
  const fromIndex = fromLine.indexOf('FROM')
  const spaceIndex = fromLine.indexOf(' ', fromIndex)
  return fromLine.substring(spaceIndex + 1, fromLine.length).trim()
}

const getFromLine = dockerfileContents => {
  const fromIndex = dockerfileContents.indexOf('FROM')
  const fileContentStartingAtFrom = dockerfileContents.substring(
    fromIndex,
    dockerfileContents.length
  )
  const allLines = fileContentStartingAtFrom.split("\n")
  return allLines[0]
}

/**
 * Look up the PHP version used by the specified Docker image.
 *
 * Possible return values:
 * - `'NONE FOUND'` -- No Dockerfile found, so no Docker image known for which
 *   we could look up the PHP version.
 * - `'UNKNOWN:' + dockerImage` -- Docker base image found, but no record found
 *   for what version of PHP that Docker image uses.
 * - (a PHP version string, such as `'7.2.24'`)
 *
 * @param {string} dockerImage -- The Docker image name, optionally with a tag
 *     specified.
 * @param {string} versionsCsvUrl -- The URL where we can retrieve a CSV file of
 *     the PHP versions used by various Docker images.
 * @returns {Promise<string>}
 */
const getPhpVersionOfImage = async (dockerImage, versionsCsvUrl) => {
  if (!dockerImage) {
    return 'NONE FOUND'
  }
  const response = await request(`GET ${versionsCsvUrl}`)
  const versions = await readCsvString(response.data)
  const matchingEntries = versions.filter(entry => entry['Docker image'] === dockerImage)
  const matchingEntry = matchingEntries.pop() || {}
  return matchingEntry['PHP version'] || 'UNKNOWN:' + dockerImage
}

module.exports = {
  getBaseImageFrom,
  getPhpVersionOfImage
}
