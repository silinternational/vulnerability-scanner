
const { readCsvString } = require('./csv')
const mem = require('mem')
const { request } = require('@octokit/request')

/**
 * Get the base image(s) specified in the FROM line(s) of the provided
 * Dockerfile contents.
 *
 * @param {string} dockerfileContents
 * @returns {string[]}
 */
const getBaseImagesFrom = dockerfileContents => {
  if (!dockerfileContents) {
    return []
  }
  
  const fromLines = getFromLines(dockerfileContents)
  const dockerImages = fromLines.map(getDockerImageFromFromLine)
  return dockerImages.filter(dockerImage => dockerImage !== null)
}

const getDockerImageFromFromLine = fromLine => {
  const regexMatchResult = fromLine.match(/FROM ([^ ]+)/)
  return Array.isArray(regexMatchResult) ? regexMatchResult[1] : null
}

const getFromLines = dockerfileContents => {
  const lines = dockerfileContents.split(/\r\n|\r|\n/)
  return lines.filter(line => line.startsWith('FROM'))
}

/**
 * Look up the NodeJS version used by the specified Docker image.
 *
 * Possible return values:
 * - `'UNKNOWN'` -- CSV has no NodeJS version data for that Docker image.
 * - `'NONE'` -- That Docker image does not use NodeJS.
 * - (a NodeJS version string, such as `'v14'`)
 *
 * @param {string} dockerImage -- The Docker image name, optionally with a tag
 *     specified.
 * @param {string} versionsCsvUrl -- The URL where we can retrieve a CSV file of
 *     the NodeJS versions used by various Docker images.
 * @returns {Promise<string>}
 */
const getNodeJsVersionOfImage = async (dockerImage, versionsCsvUrl) => {
  const response = await getVersionsCsvUsingCache(versionsCsvUrl)
  const versions = await readCsvString(response.data)
  const matchingEntries = versions.filter(entry => entry['Docker image'] === dockerImage)
  const matchingEntry = matchingEntries.pop() || {}
  return matchingEntry['NodeJS version'] || 'UNKNOWN'
}
const getNodeJsVersionOfImageUsingCache = mem(
  getNodeJsVersionOfImage,
  { cacheKey: JSON.stringify }
)

/**
 * Look up the PHP version used by the specified Docker image.
 *
 * Possible return values:
 * - `'UNKNOWN'` -- CSV has no entry for that Docker image.
 * - `'NONE'` -- That Docker image does not use PHP.
 * - (a PHP version string, such as `'7.2.24-0ubuntu0.18.04.7'`)
 *
 * @param {string} dockerImage -- The Docker image name, optionally with a tag
 *     specified.
 * @param {string} versionsCsvUrl -- The URL where we can retrieve a CSV file of
 *     the PHP versions used by various Docker images.
 * @returns {Promise<string>}
 */
const getPhpVersionOfImage = async (dockerImage, versionsCsvUrl) => {
  const response = await getVersionsCsvUsingCache(versionsCsvUrl)
  const versions = await readCsvString(response.data)
  const matchingEntries = versions.filter(entry => entry['Docker image'] === dockerImage)
  const matchingEntry = matchingEntries.pop() || {}
  return matchingEntry['PHP version'] || 'UNKNOWN'
}
const getPhpVersionOfImageUsingCache = mem(
  getPhpVersionOfImage,
  { cacheKey: JSON.stringify }
)

const getVersionsCsv = async versionsCsvUrl => request(`GET ${versionsCsvUrl}`)
const getVersionsCsvUsingCache = mem(
  getVersionsCsv,
  { cacheKey: JSON.stringify }
)

module.exports = {
  getBaseImagesFrom,
  getNodeJsVersionOfImageUsingCache,
  getPhpVersionOfImageUsingCache
}
