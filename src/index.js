const composer = require('./composer')
const github = require('./github')
const semverSatisfies = require('semver/functions/satisfies')

module.exports.getDependenciesOfRepo = async (token, repo) => {
  return github.getContentsOfFileByName(
    token,
    repo,
    'composer.lock'
  ).then(
    contents => composer.getDependenciesFromComposerLock(token, contents)
  )
}

module.exports.getPreferredIdentifier = vulnerability => {
  const advisory = vulnerability.advisory || {}
  let identifiers = advisory.identifiers || []
  const cveIdentifiers = identifiers.filter(i => i.type === 'CVE')
  if (cveIdentifiers.length > 0) {
    identifiers = cveIdentifiers
  }
  return identifiers.map(i => i.value).join(', ')
}

module.exports.getSecurityVulnerabilitiesForDependency = async (token, dependency) => {
  return github.getSecurityVulnerabilitiesForPackageUsingCache(
    token,
    dependency.name
  ).then(
    vulnerabilities => vulnerabilities.filter(vulnerability => semverSatisfies(
      dependency.version,
      vulnerability.vulnerableVersionRange
    ))
  )
}

module.exports.getSecurityVulnerabilitiesForOrg = async (token, org) => {
  console.log(`Scanning for vulnerabilities in ${org}`)
  const results = {}
  
  const repos = await github.listRepos(org, token)
  for (let i = 0; i < repos.length; i++) {
    const repo = repos[i]
    const vulnerabilities = await module.exports.getSecurityVulnerabilitiesForRepo(token, repo)
    if (vulnerabilities === undefined) {
      results[repo] = null
      continue
    }
    results[repo] = []
    for (let j = 0; j < vulnerabilities.length; j++) {
      results[repo].push(vulnerabilities[j])
    }
  }
  
  return results
}

module.exports.getSecurityVulnerabilitiesForRepo = async (token, repo) => {
  console.log(`Looking for vulnerabilities in ${repo}`)
  const results = []
  
  const dependencies = await module.exports.getDependenciesOfRepo(token, repo)
  if (dependencies === undefined) {
    console.log('(unable to determine dependencies)')
    return undefined
  }
  for (let i = 0; i < dependencies.length; i++) {
    const dependency = dependencies[i]
    console.log(`Checking ${dependency.name} [${dependency.version}]`)
    
    const vulnerabilities = await module.exports.getSecurityVulnerabilitiesForDependency(
      token,
      dependency
    )
    
    for (let j = 0; j < vulnerabilities.length; j++) {
      const vulnerability = vulnerabilities[j]
      console.log(
        `! Found vulnerability: ${vulnerability.package.name} ${vulnerability.vulnerableVersionRange}`
      )
      results.push(vulnerability)
    }
  }
  
  return results
}
